<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.baoxina.mybatis.senior.mapper.OrderMapperExt">
	
	<!-- 查询订单的基本sql片段 -->
	<sql id="findAllOrders">
		select * from orders
	</sql>
	
	<!-- orders表 与 Orders属性的基本映射配置-->
	<resultMap type="Orders" id="OrdersResultMap">
		<id column="id" property="id"/>
		<result column="user_id" property="userId"/>
		<result column="number" property="number"/>
		<result column="creationtime" property="creationtime"/>
		<result column="note" property="note"/>
	</resultMap>
	
	<!-- 查询订单并关联查询用户，用户信息延迟加载使用association的配置 -->
	<resultMap type="Orders" id="findOrdersUserLazyLoadingResultMap" extends="OrdersResultMap">
		<association column="user_id" property="user" javaType="user" select="com.baoxina.mybatis.senior.mapper.UserMapper.findUserById"/>
	</resultMap>
	
	
	<!-- 查询订单并关联查询订单明细，订单明细延迟加载使用collection的配置 -->
	<resultMap type="Orders" id="findOrdersDetailLazyLoadingResultMap" extends="OrdersResultMap">
		<collection column="id" property="orderdetails"  ofType="Orderdetail" select="com.baoxina.mybatis.senior.mapper.OrderdetailMapper.findOrderDetailByOrderIds"/>
	</resultMap>

	<resultMap type="User" id="UserAndItemsResultMap">
		<id column="user_id" property="id"/>
		<result column="username" property="username"/>
		<result column="sex" property="sex"/>
		<result column="address" property="address"/>
		
		<!-- 订单属性 -->
		<collection property="ordersList" ofType="Orders">
			<id column="id" property="id"/>
			<result column="user_id" property="userId"/>
			<result column="number" property="number"/>
			<result column="creationtime" property="creationtime"/>
			<result column="note" property="note"/>
			
			<!-- 明细信息集合属性 -->
			<collection property="orderdetails" ofType="Orderdetail">
				<id column="orderdetail_id" property="id"/>
				<result column="items_id" property="itemsId"/>
				<result column="items_num" property="itemsNum"/>
				<result column="orders_id" property="ordersId"/>
				<!-- 商品属性 -->
				<association property="items" javaType="Items">
					<id column="items_id" property="id"/>
					<result column="items_name" property="name"/>
					<result column="items_detail" property="detail"/>
					<result column="items_price" property="price"/>
				</association>
			</collection>
		</collection>
	</resultMap>

	<!-- 订单及订单明细的resultMap -->
	<!-- 使用extends继承OrdersUserResultMap，就不用在OrdersAndOrderDetailResultMap中配置订单信息和用户信息的映射关系了 -->
	<resultMap type="Orders" id="OrdersAndOrderDetailResultMap" extends="OrdersUserResultMap">
		<!-- 订单信息 -->
		<!-- 用户信息 -->
			<!-- association表示映射到Orders中的单个pojo属性user中 -->
		<!-- 订单明细信息 -->
			<!-- 一个订单关联查询出了多条明细，要使用collection进行映射 -->
			<!-- collection表示  对关联查询到的多条记录  映射到Orders中的集合属性orderDetails中 -->
			<!-- property表示  将关联查询到的多条记录映射到Orders的哪个属性中-->
			<!-- ofType:指定映射到list集合属性中pojo的类型 -->
		<collection property="orderdetails" ofType="Orderdetail">
			<!-- id:订单明细表唯一标识 -->
			<!-- property:要将订单明细的唯一标识映射到Orderdetail的哪个属性 -->
			<id column="orderdetail_id" property="id"/>
			<result column="items_id" property="itemsId"/>
			<result column="items_num" property="itemsNum"/>
			<result column="orders_id" property="ordersId"/>
		</collection>
	</resultMap>


	<resultMap type="orders" id="OrdersUserResultMap">
		<id column="id" property="id"/>
		<!-- 配置映射的订单信息 -->
		<result column="user_id" property="userId"/>
		<result column="number" property="number"/>
		<result column="creationtime" property="creationtime"/>
		<result column="note" property="note"/>
		<!-- 配置映射的关联的用户信息 -->
		<!-- association表示映射到Orders中的单个pojo属性user中 -->
		<!-- association:用于映射关联查询单个对象的信息
			 property:要将关联查询的用户信息映射到Orders中的哪个属性
		-->
		<association property="user" javaType="user">
			<!-- 
				id:关联查询用户的唯一标识 
				column:指定唯一标识用户信息的列
				javaType:映射到user的哪个属性			
			-->
			<id column="user_id" property="id"/>
			<result column="username" property="username"/>
			<result column="sex" property="sex"/>
			<result column="address" property="address"/>
		</association>
	</resultMap>
	<!-- ==========================【一对一查询】============================== -->
	<!-- 	实现一对一查询：
				resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。
				如果没有查询结果的特殊要求建议使用resultType。
				
				resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的属性中。
				
				resultMap可以实现延迟加载，resultType无法实现延迟加载。
 	-->
	<select id="findOrdersUser" resultType="OrdersExt">
		select orders.*,user.username,user.sex,user.address from orders,user where orders.user_id = user.id
	</select>
	<select id="findOrdersUserUseResultMap" resultMap="OrdersUserResultMap">
		select orders.*,user.username,user.sex,user.address from orders,user where orders.user_id = user.id
	</select>
	
	
	<!-- ==========================【一对多查询】============================== -->
	<select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
		select orders.*,user.username,user.sex,user.address,orderdetail.id orderdetail_id,orderdetail.items_id,orderdetail.items_num,orderdetail.orders_id from orders,user,orderdetail where orders.user_id = user.id and orderdetail.orders_id=orders.id
	</select>
	
	<!-- ==========================【多对多查询】============================== -->
	<select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
		select orders.*,user.username,user.sex,user.address,orderdetail.id orderdetail_id,orderdetail.items_id,orderdetail.items_num,orderdetail.orders_id,items.name items_name,items.detail items_detail,items.price items_price from orders,user,orderdetail,items where orders.user_id = user.id and orderdetail.orders_id=orders.id and orderdetail.items_id=items.id
	</select>
	
	<!-- =============【延迟加载 】 使用resultMap中的association实现============ -->
	<select id="findOrdersUserLazyLoading" resultMap="findOrdersUserLazyLoadingResultMap" >
		<include refid="findAllOrders"/>
	</select>
	
	
	<!-- =============【延迟加载 】 使用resultMap中的collection实现============ -->
	<select id="findOrdersDetailLazyLoading" resultMap="findOrdersDetailLazyLoadingResultMap">
		<include refid="findAllOrders"/>
	</select>
	
</mapper>